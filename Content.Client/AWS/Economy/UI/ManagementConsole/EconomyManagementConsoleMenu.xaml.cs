using Content.Client.UserInterface.Controls;
using Content.Shared.AWS.Economy;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.XAML;

namespace Content.Client.AWS.Economy.UI.ManagementConsole;

[GenerateTypedNameReferences]
public sealed partial class EconomyManagementConsoleMenu : FancyWindow
{
    [Dependency] private readonly EntityManager _entityManager = default!;

    private EconomyManagementConsoleBoundUserInterface Owner { get; set; }

    public EconomyManagementConsoleMenu(EconomyManagementConsoleBoundUserInterface owner)
    {
        IoCManager.InjectDependencies(this);
        RobustXamlLoader.Load(this);

        Owner = owner;

        Tabs.SetTabTitle(0, Loc.GetString("economybanksystem-management-console-management-tab"));
        Tabs.SetTabTitle(1, Loc.GetString("economybanksystem-management-console-account-holder-tab"));
        Tabs.SetTabTitle(2, Loc.GetString("economybanksystem-management-console-bonus-tab"));

        AccountManagementTab.OnBlockAccountPressed += Owner.BlockAccountToggle;
        AccountManagementTab.OnChangeNamePressed += Owner.ChangeName;

        AccountHolderTab.OnChangeNamePressed += Owner.ChangeName;
        AccountHolderTab.OnBlockAccountPressed += Owner.BlockAccountToggle;
        AccountHolderTab.OnChangeAccountPressed += Owner.ChangeAccountHolderID;
        AccountHolderTab.OnInitializeAccountPressed += Owner.InitializeAccountOnHolder;

        BonusTab.OnPayBonusPressed += Owner.PayBonus;
    }

    public void UpdateState(EconomyManagementConsoleUserInterfaceState state)
    {
        PrivilegedIdButton.Disabled = !state.Priveleged;
        PrivilegedIdLabel.Text = state.IDCardName ?? "-";

        TargetIdButton.Disabled = true;
        TargetIdLabel.Text = "-";
        Entity<EconomyAccountHolderComponent>? holder = null;
        if (_entityManager.TryGetEntity(state.AccountHolder, out var localHolder) &&
            _entityManager.TryGetComponent<EconomyAccountHolderComponent>(localHolder, out var holderComp))
        {
            TargetIdLabel.Text = holderComp.AccountID;
            TargetIdButton.Disabled = false;
            holder = (localHolder.Value, holderComp);
        }

        UpdateAccountManagement(state);
        UpdateHolder(state, holder);
        UpdateBonus(state.Priveleged);
    }

    private void UpdateAccountManagement(EconomyManagementConsoleUserInterfaceState state)
    {
        AccountManagementTab.Priveleged = state.Priveleged;
        AccountManagementTab.Initialize();
        AccountManagementTab.OnUpdateState(state.AccountID, state.AccountName, state.Balance, state.Penalty, state.Blocked, state.CanReachPayDay);
    }

    private void UpdateHolder(EconomyManagementConsoleUserInterfaceState state, Entity<EconomyAccountHolderComponent>? holder)
    {
        AccountHolderTab.CurrentCard = holder ?? null;
        AccountHolderTab.Priveleged = state.Priveleged;
        AccountHolderTab.OnUpdateState(state.AccountID, state.AccountName, state.Balance, state.Penalty, state.Blocked, state.CanReachPayDay);
    }

    private void UpdateBonus(bool priveleged)
    {
        BonusTab.OnUpdateState(priveleged);
    }
}
