using Content.Client.UserInterface.Controls;
using Content.Shared.AWS.Economy;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.XAML;
using Robust.Client.UserInterface.Controls;
using System.Linq;

namespace Content.Client.AWS.Economy.UI.ManagementConsole;

[GenerateTypedNameReferences]
public sealed partial class EconomyManagementConsoleMenu : FancyWindow
{
    [Dependency] private readonly EntityManager _entityManager = default!;

    private EconomyManagementConsoleBoundUserInterface Owner { get; set; }
    private IReadOnlyList<Entity<EconomyBankAccountComponent>> _accounts = default!;
    private EconomyBankAccountComponent? _currentAccount;

    public bool Priveleged;

    public EconomyManagementConsoleMenu(EconomyManagementConsoleBoundUserInterface owner)
    {
        IoCManager.InjectDependencies(this);
        RobustXamlLoader.Load(this);

        Owner = owner;

        var bankAccountSystem = _entityManager.System<EconomyBankAccountSystemShared>();
        var tags = new List<BankAccountTag>() { BankAccountTag.Department };
        _accounts = bankAccountSystem.GetAccounts(EconomyBankAccountMask.ByTags, tags).Values.ToList();

        FillList();

        FindAccount.OnTextEntered += OnTextEnteredAccount;
        FindAccountButton.OnPressed += OnFindAccountButtonPressed;

        BlockButton.OnPressed += _ =>
        {
            if (_currentAccount is null)
                return;

            Owner.BlockAccountToggle(_currentAccount);
        };
        ChangeNameButton.OnPressed += _ =>
        {
            if (_currentAccount is null)
                return;

            Owner.ChangeName(_currentAccount, ChangeNameBox.Text);
            ChangeNameBox.Clear();
        };
    }

    private void OnSelectAccount(ItemList.Item accountId)
    {
        if (accountId.Metadata is not EconomyBankAccountComponent account)
            return;

        FillAccountInfo(account);

        if (Priveleged)
        {
            FindAccountButton.Disabled = true;
            BlockButton.Disabled = false;
            ChangeNameButton.Disabled = false;
        }

        _currentAccount = account;
    }

    private void OnFindAccountFieldSelected(ItemList.Item field)
    {
        AccountIdLabel.Text = "-";
        AccountOwnerLabel.Text = "-";
        AccountBalanceLabel.Text = "-";
        AccountBlockedLabel.Text = "-";
        BlockButton.Text = "-";

        if (Priveleged)
        {
            FindAccountButton.Disabled = false;
            BlockButton.Disabled = true;
            ChangeNameButton.Disabled = true;
        }
    }

    private void OnFindAccountButtonPressed(Button.ButtonEventArgs eventArgs)
    {
        var bankAccountSystem = _entityManager.System<EconomyBankAccountSystemShared>();
        if (!bankAccountSystem.TryGetAccount(FindAccountBox.Text, out var accountEnt))
            return;

        var account = accountEnt.Comp;
        FillAccountInfo(account);

        if (Priveleged)
        {
            BlockButton.Disabled = false;
            ChangeNameButton.Disabled = false;
        }

        _currentAccount = account;

        FindAccountBox.Clear();
    }

    private void OnTextEnteredAccount(LineEdit.LineEditEventArgs eventArgs)
    {
        AccountList.Clear();
        var upText = eventArgs.Text.ToUpper();
        foreach (var (key, value) in _accounts)
        {
            var fieldName = FormFieldName(value);
            if (fieldName.Contains(upText))
            {
                var field = AccountList.AddItem(fieldName);
                field.Metadata = value;
                field.OnSelected += OnSelectAccount;
            }
        }
        if (AccountList.Count == 0)
        {
            AccountList.AddItem("No data acquired");
            return;
        }
        AccountList.SortItemsByText();
    }

    private void FillList()
    {
        foreach (var (key, value) in _accounts)
        {
            var field = AccountList.AddItem(FormFieldName(value));
            field.Metadata = value;
            field.OnSelected += OnSelectAccount;
        }

        var findAccountField = AccountList.AddItem(Loc.GetString("economybanksystem-management-console-management-find-account"));
        findAccountField.OnSelected += OnFindAccountFieldSelected;

        AccountList.SortItemsByText();
    }

    private string FormFieldName(EconomyBankAccountComponent account)
    {
        return account.AccountID + " â€” " + account.AccountName;
    }

    private void FillAccountInfo(EconomyBankAccountComponent account)
    {
        AccountIdLabel.Text = account.AccountID;
        AccountOwnerLabel.Text = account.AccountName;
        var balance = account.Balance;
        AccountBalanceLabel.Text = balance.ToString("N0") ?? "-";
        AccountBlockedLabel.Text = account.Blocked ? Loc.GetString("economybanksystem-management-console-management-block") :
                                                     Loc.GetString("economybanksystem-management-console-management-unblock");
        BlockButton.Text = account.Blocked ? Loc.GetString("economybanksystem-management-console-management-unblock-button") :
                                             Loc.GetString("economybanksystem-management-console-management-block-button");
    }
}
