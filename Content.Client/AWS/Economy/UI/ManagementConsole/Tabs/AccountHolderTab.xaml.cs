using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.XAML;
using Robust.Client.UserInterface;
using Content.Shared.AWS.Economy;

namespace Content.Client.AWS.Economy.UI.ManagementConsole.Tabs;

[GenerateTypedNameReferences]
public sealed partial class AccountHolderTab : Control
{
    private EconomyBankAccountComponent? _currentAccount;

    [Dependency] private readonly EntityManager _entityManager = default!;

    public Entity<EconomyAccountHolderComponent>? CurrentCard;
    public bool Priveleged;

    public Action<EconomyBankAccountComponent, string>? OnChangeNamePressed;
    public Action<EconomyBankAccountComponent>? OnBlockAccountPressed;
    public Action<NetEntity, string>? OnChangeAccountPressed;
    public Action<NetEntity>? OnInitializeAccountPressed;

    public AccountHolderTab()
    {
        IoCManager.InjectDependencies(this);
        RobustXamlLoader.Load(this);

        GetAccount(CurrentCard);

        ChangeNameButton.OnPressed += _ =>
        {
            if (_currentAccount is null)
                return;

            OnChangeNamePressed?.Invoke(_currentAccount, ChangeNamePrompt.Text);
        };
        BlockButton.OnPressed += _ =>
        {
            if (_currentAccount is null)
                return;

            OnBlockAccountPressed?.Invoke(_currentAccount);
        };
        ChangeAccountButton.OnPressed += _ =>
        {
            if (CurrentCard is null)
                return;

            var economySystem = _entityManager.System<EconomyBankAccountSystemShared>();
            if (!economySystem.IsValidAccount(ChangeAccountPrompt.Text))
            {
                ErrorLabel.Text = Loc.GetString("economybanksystem-management-console-error-invalid-account");
                return;
            }

            var netEntity = _entityManager.GetNetEntity(CurrentCard.Value);
            OnChangeAccountPressed?.Invoke(netEntity, ChangeAccountPrompt.Text);
        };
        InitializeAccountButton.OnPressed += _ =>
        {
            if (CurrentCard is null)
                return;

            var netEntity = _entityManager.GetNetEntity(CurrentCard.Value);
            OnInitializeAccountPressed?.Invoke(netEntity);
        };
    }

    private void GetAccount(EconomyAccountHolderComponent? accountHolder)
    {
        var economySystem = _entityManager.System<EconomyBankAccountSystemShared>();
        if (accountHolder is not null && economySystem.TryGetAccount(accountHolder.AccountID, out var accountEnt))
        {
            _currentAccount = accountEnt.Comp;
            FillAccount(accountEnt.Comp);
            UpdateButtons(Priveleged);
            return;
        }

        _currentAccount = null;
        FillAccount(null);
        UpdateButtons(Priveleged);
    }

    private void FillAccount(EconomyBankAccountComponent? account)
    {
        AccountInitLabel.Text = account is not null ? Loc.GetString("economybanksystem-management-console-management-initialized") :
                                                      Loc.GetString("economybanksystem-management-console-management-not-initialized");
        AccountIdLabel.Text = account is not null ? account.AccountID : "-";
        AccountOwnerLabel.Text = account is not null ? account.AccountName : "-";
        var balance = account is not null ? string.Format("{0:N0}", account.Balance) : "-";
        AccountBalanceLabel.Text = balance;
        var blocked = account is not null ? (account.Blocked ? Loc.GetString("economybanksystem-management-console-management-block") : Loc.GetString("economybanksystem-management-console-management-unblock"))
                                          : "-";
        var blockedButton = account is not null ? (account.Blocked ? Loc.GetString("economybanksystem-management-console-management-unblock-button") : Loc.GetString("economybanksystem-management-console-management-block-button"))
                                                : "-";
        AccountBlockStatusLabel.Text = blocked;
        BlockButton.Text = blockedButton;
        var paydayStatus = account is not null ? (account.CanReachPayDay ? Loc.GetString("economybanksystem-management-console-management-salary-reachable") : Loc.GetString("economybanksystem-management-console-management-salary-not-reachable"))
                                               : "-";
        AccountPaydayStatusLabel.Text = paydayStatus;
    }

    private void UpdateButtons(bool priveleged)
    {
        ChangeNameButton.Disabled = !priveleged || _currentAccount is null;
        BlockButton.Disabled = !priveleged || _currentAccount is null;
        ChangeAccountButton.Disabled = !priveleged || CurrentCard is null;
        InitializeAccountButton.Disabled = !priveleged || _currentAccount is not null || CurrentCard is null;
    }

    public void OnUpdateState(string? accountID,
                              string? accountName,
                              ulong? balance,
                              ulong? penalty,
                              bool? blocked,
                              bool? canReachPayDay)
    {
        _currentAccount = null;

        if (accountID is null)
        {
            FillAccount(null);
            UpdateButtons(Priveleged);
            return;
        }

        AccountInitLabel.Text = accountID is not null ? Loc.GetString("economybanksystem-management-console-management-initialized") :
                                                      Loc.GetString("economybanksystem-management-console-management-not-initialized");
        var _accountID = accountID ?? "-";
        AccountIdLabel.Text = _accountID;
        AccountOwnerLabel.Text = accountName ?? "-";
        var accountBalance = balance is not null ? string.Format("{0:N0}", balance) : "-";
        AccountBalanceLabel.Text = accountBalance;
        var accountBlocked = blocked is not null ? (blocked.Value ? Loc.GetString("economybanksystem-management-console-management-block") : Loc.GetString("economybanksystem-management-console-management-unblock"))
                                          : "-";
        var blockedButton = blocked is not null ? (blocked.Value ? Loc.GetString("economybanksystem-management-console-management-unblock-button") : Loc.GetString("economybanksystem-management-console-management-block-button"))
                                                : "-";
        AccountBlockStatusLabel.Text = accountBlocked;
        BlockButton.Text = blockedButton;
        var paydayStatus = canReachPayDay is not null ? (canReachPayDay.Value ? Loc.GetString("economybanksystem-management-console-management-salary-reachable") : Loc.GetString("economybanksystem-management-console-management-salary-not-reachable"))
                                               : "-";
        AccountPaydayStatusLabel.Text = paydayStatus;

        var economySystem = _entityManager.System<EconomyBankAccountSystemShared>();
        if (economySystem.TryGetAccount(_accountID, out var foundAccount))
            _currentAccount = foundAccount.Comp;
        UpdateButtons(Priveleged);
    }
}
