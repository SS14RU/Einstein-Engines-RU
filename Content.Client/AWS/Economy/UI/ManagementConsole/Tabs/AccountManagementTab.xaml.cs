using Content.Shared.AWS.Economy;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.XAML;
using Robust.Client.UserInterface.Controls;
using System.Linq;
using Robust.Client.UserInterface;

namespace Content.Client.AWS.Economy.UI.ManagementConsole.Tabs;

[GenerateTypedNameReferences]
public sealed partial class AccountManagementTab : Control
{
    [Dependency] private readonly EntityManager _entityManager = default!;

    private IReadOnlyList<Entity<EconomyBankAccountComponent>> _accounts = default!;
    private EconomyBankAccountComponent? _currentAccount;

    public Action<EconomyBankAccountComponent>? OnBlockAccountPressed;
    public Action<EconomyBankAccountComponent, string>? OnChangeNamePressed;

    public bool Priveleged;

    public AccountManagementTab()
    {
        IoCManager.InjectDependencies(this);
        RobustXamlLoader.Load(this);

        Initialize();

        FindAccount.OnTextEntered += OnTextEnteredAccount;

        BlockButton.OnPressed += _ =>
        {
            if (_currentAccount is null)
                return;

            OnBlockAccountPressed?.Invoke(_currentAccount);
        };
        ChangeNameButton.OnPressed += _ =>
        {
            if (_currentAccount is null)
                return;

            OnChangeNamePressed?.Invoke(_currentAccount, ChangeNameBox.Text);
            ChangeNameBox.Clear();
        };
    }

    public void Initialize()
    {
        AccountList.Clear();
        var bankAccountSystem = _entityManager.System<EconomyBankAccountSystemShared>();
        var accounts = bankAccountSystem.GetAccounts(EconomyBankAccountMask.All);
        _accounts = accounts.Values.ToList();

        FillList();
    }

    public void OnUpdateState(string? accountID,
                              string? accountName,
                              ulong? balance,
                              ulong? penalty,
                              bool? blocked,
                              bool? canReachPayDay)
    {
        if (accountID is null)
        {
            ClearCurrentAccount();
            return;
        }

        var _accountID = accountID ?? "-";
        AccountIdLabel.Text = _accountID;
        AccountOwnerLabel.Text = accountName ?? "-";
        var accountBalance = balance is not null ? string.Format("{0:N0}", balance) : "-";
        AccountBalanceLabel.Text = accountBalance;
        var accountBlocked = blocked is not null ? (blocked.Value ? Loc.GetString("economybanksystem-management-console-management-block") : Loc.GetString("economybanksystem-management-console-management-unblock"))
                                          : "-";
        var blockedButton = blocked is not null ? (blocked.Value ? Loc.GetString("economybanksystem-management-console-management-unblock-button") : Loc.GetString("economybanksystem-management-console-management-block-button"))
                                                : "-";
        AccountBlockedLabel.Text = accountBlocked;
        BlockButton.Text = blockedButton;

        var economySystem = _entityManager.System<EconomyBankAccountSystemShared>();
        if (economySystem.TryGetAccount(_accountID, out var foundAccount))
            _currentAccount = foundAccount.Comp;
        UpdateButtons(Priveleged);
    }

    private void OnSelectAccount(ItemList.Item accountId)
    {
        if (accountId.Metadata is not EconomyBankAccountComponent account)
            return;

        _currentAccount = account;
        FillAccountInfo(account);
        UpdateButtons(Priveleged);
    }

    private void OnTextEnteredAccount(LineEdit.LineEditEventArgs eventArgs)
    {
        AccountList.Clear();
        var upText = eventArgs.Text.ToUpper();
        foreach (var (key, value) in _accounts)
        {
            var fieldName = FormFieldName(value);
            if (fieldName.Contains(upText))
            {
                var field = AccountList.AddItem(fieldName);
                field.Metadata = value;
                field.OnSelected += OnSelectAccount;
            }
        }
        if (AccountList.Count == 0)
        {
            AccountList.AddItem("No data acquired");
            return;
        }
        AccountList.SortItemsByText();
    }

    private void FillList()
    {
        foreach (var (key, value) in _accounts)
        {
            var field = AccountList.AddItem(FormFieldName(value));
            field.Metadata = value;
            field.OnSelected += OnSelectAccount;
        }

        AccountList.SortItemsByText();
    }

    private string FormFieldName(EconomyBankAccountComponent account)
    {
        return account.AccountID + " â€” " + account.AccountName;
    }

    private void UpdateButtons(bool priveleged)
    {
        BlockButton.Disabled = _currentAccount is null || !priveleged;
        ChangeNameButton.Disabled = _currentAccount is null || !priveleged;
    }

    private void ClearCurrentAccount()
    {
        AccountIdLabel.Text = "-";
        AccountOwnerLabel.Text = "-";
        AccountBalanceLabel.Text = "-";
        AccountBlockedLabel.Text = "-";
        BlockButton.Text = "-";

        _currentAccount = null;
        UpdateButtons(Priveleged);
    }

    private void FillAccountInfo(EconomyBankAccountComponent account)
    {
        AccountIdLabel.Text = account.AccountID;
        AccountOwnerLabel.Text = account.AccountName;
        var balance = account.Balance;
        AccountBalanceLabel.Text = balance.ToString("N0") ?? "-";
        AccountBlockedLabel.Text = account.Blocked ? Loc.GetString("economybanksystem-management-console-management-block") :
                                                     Loc.GetString("economybanksystem-management-console-management-unblock");
        BlockButton.Text = account.Blocked ? Loc.GetString("economybanksystem-management-console-management-unblock-button") :
                                             Loc.GetString("economybanksystem-management-console-management-block-button");
    }
}
